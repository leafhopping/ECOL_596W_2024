---
title: "Week_4_exercises_ggplot"
format: html
editor: source
embed-resources: true
css: |
      <style>
        body { font-family: Arial, sans-serif; }
      </style>
js: |
      <script>
        console.log('Custom JavaScript loaded.');
      </script>
---
# ECOL 596
## Week 4: Plotting in ggplot

## Chapter 8 Exercises 
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Step 1, load data and relevant packages
```{r}
#| warning: false
#| message: false
# Load libraries 
library(dplyr)
library(ggplot2)
library(dslabs)
data(heights)
data(murders)
```

```{r}
p <- murders |> ggplot()
class(p)
```
Class of this plot is "gg" and "ggplot." Sabrina's note: I did not
know this. 

```{r}
p
```
2. Remember that to print an object you can use the command print or simply type the object. Print the object p defined in exercise one and describe what you see.
  
"p" is a blank plot 

3. Using the pipe |>, create an object p but this time associated with the heights dataset instead of the murders dataset. 
```{r}
p <- heights |> ggplot()

#4. What is the class of p?
class(p) #same thing
head(murders)
```

5. Now we are going to add a layer and the corresponding aesthetic mappings. For the murders data we plotted total murders versus population sizes. Explore the murders data frame to remind yourself what are the names for these two variables and select the correct answer. Hint: Look at ?murders.

"total" is the column for murders and "population" is the col for pop size

6. To create the scatterplot we add a layer with geom_point. The aesthetic mappings require us to define the x-axis and y-axis variables, respectively. So the code looks like this:

```{r}
murders |> ggplot(aes(x = total, y = population)) +
  geom_point()
```
7. Note that if we don’t use argument names, we can obtain the same plot by making sure we enter the variable names in the right order.

Sabrina note: for nearly all R functions, you don't have to say arg = if you put the arguments in the right order. 
so:

```{r, eval = F}
murders |> ggplot(aes(population, total)) +
  geom_point() 
```
will work just as well as 
```{r, eval = F}
murders |> ggplot(aes(x = population, y = total)) +
  geom_point()
```
**however** it is good practice to always include your 
argument names (i.e. "x = ", "y = ", "data = ") for readability and to make sure you and R are on the same page. 

8. If instead of points we want to add text, we can use the geom_text() or geom_label() geometries. The following code
murders |> ggplot(aes(population, total)) + geom_label() will give us an error message. Why?

I think the answer is: 
"We need to map a character to each point through the label argument in aes."

9. Rewrite the code above to use abbreviation as the label through aes
```{r}
murders |> ggplot(aes(x = population, y = total, label = abb)) + geom_label()
```

Fun fact, you can also define aesthetics within geoms. 
```{r}
murders |> ggplot(aes(x = population, y = total)) + 
  geom_label(aes(label = abb))
```

10. Change the color of the labels to blue. How will we do this?
Answer: d works.
```{r}
murders |> ggplot(aes(x = population, y = total, label = abb)) + 
  geom_label(color = "blue")
```

11. see above

12. Now suppose we want to use color to represent the different regions. In this case which of the following is most appropriate:

Answer: Because each label needs a different color we map the colors through the color argument of aes.

13. Rewrite the code above to make the labels’ colors be determined by the state’s region.
```{r}
murders |> ggplot(aes(x = population, 
                      y = total, 
                      label = abb,
                      color = region)) + 
  geom_label()
```
14. Now we are going to change the x-axis to a log scale to account for the fact the distribution of population is skewed. Let’s start by defining an object p holding the plot we have made up to now
```{r}
p <- murders |> 
  ggplot(aes(population, total, label = abb, color = region)) +
  geom_label() 
p + scale_x_log10()
```

15. Repeat the previous exercise but now change both axes to be in the log scale.
```{r}
p <- murders |> 
  ggplot(aes(population, total, label = abb, color = region)) +
  geom_label() 
p + 
  scale_x_log10() +
  scale_y_log10()
```
16. Now edit the code above to add the title “Gun murder data” to the plot. Hint: use the ggtitle function.

```{r}
p <- murders |> 
  ggplot(aes(population, total, label = abb, color = region)) +
  geom_label() 
p + 
  scale_x_log10() +
  scale_y_log10() +
  ggtitle("Gun murder data")
```
### Sabrina's note: 
This still looks kind of ugly. Here's an improvement using Sabrina's preferred
plotting theme package, ggthemr. More info here: 
https://github.com/Mikata-Project/ggthemr

```{r}
library(ggthemr)
ggthemr(palette = "solarized", layout = "clean", text_size = 14)

options(scipen = 999) #surpress scientific notation
murders |> 
  ggplot(aes(population/1000000, total, label = abb, color = region)) +
  geom_text() +
  scale_x_log10() +
  scale_y_log10() +
  ggtitle("Gun murder data") +
  labs(y = bquote("Murders per year (" ~ log[10] ~ "scale)"),
       x = bquote("Population (millions," ~ log[10] ~ "scale)"),
       color = "Region")

```

17. Now we are going to use the geom_histogram function to make a histogram of the heights in the height data frame. When reading the documentation for this function we see that it requires just one mapping, the values to be used for the histogram. Make a histogram of all the plots.

What is the variable containing the heights?

SMM: heights$height or height I think are both reasonable answers

18. Now create a ggplot object using the pipe to assign the heights data to a ggplot object. Assign height to the x values through the aes function.
```{r}
heights %>% 
  ggplot(aes(x = height)) 
```


19. Now we are ready to add a layer to actually make the histogram. Use the object created in the previous exercise and the geom_histogram function to make the histogram.
```{r}
heights %>% 
  ggplot(aes(x = height)) + 
  geom_histogram()
```

20. Note that when we run the code in the previous exercise we get the warning: stat_bin() using bins = 30. Pick better value with binwidth. Use the binwidth argument to change the histogram made in the previous exercise to use bins of size 1 inch.
```{r}
heights %>% 
  ggplot(aes(x = height)) + 
  geom_histogram(binwidth = 1)
```

21. Instead of a histogram, we are going to make a smooth density plot. In this case we will not make an object, but instead render the plot with one line of code. Change the geometry in the code previously used to make a smooth density instead of a histogram.

```{r}
heights %>% 
  ggplot(aes(x = height)) + geom_density()
```

22. Now we are going to make a density plot for males and females separately. We can do this using the group argument. We assign groups via the aesthetic mapping as each point needs to a group before making the calculations needed to estimate a density.
```{r}

heights %>% 
  ggplot(aes(x = height, groups = sex)) + geom_density()
```

23. We can also assign groups through the color argument. This has the added benefit that it uses colors to distinguish the groups. Change the code above to use color.

```{r}

heights %>% 
  ggplot(aes(x = height, color = sex)) + geom_density()
```

24. We can also assign groups through the fill argument. This has the added benefit that it uses colors to distinguish the groups, like this:
```{r}
heights %>% 
  ggplot(aes(x = height, fill = sex)) + geom_density()
```


However, here the second density is drawn over the other. We can make the curves more visible by using alpha blending to add transparency. Set the alpha parameter to 0.2 in the geom_density function to make this change.

```{r}
heights %>% 
  ggplot(aes(x = height, fill = sex)) + geom_density(alpha = 0.2)

```

